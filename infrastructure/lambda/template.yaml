AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Digital Identity Passport Credential Issuer API

Parameters:
  Environment:
    Description: "The environment type"
    Type: "String"
    AllowedValues:
      - "dev"
      - "build"
      - "staging"
      - "integration"
      - "production"
    ConstraintDescription: must be dev, build, staging, integration or production

Conditions:
  AddProvisionedConcurrency: !Not
    - !Equals
      - !FindInMap [ProvisionedConcurrency, Environment, !Ref 'Environment']
      -  0

  IsDevelopmentEnvironment: !Not
    - !Or
      - !Equals [ !Ref Environment, "build"]
      - !Equals [ !Ref Environment, "staging"]
      - !Equals [ !Ref Environment, "integration"]
      - !Equals [ !Ref Environment, "production"]

  IsNotDevelopmentEnvironment: !Not
    - Condition: IsDevelopmentEnvironment

Globals:
  Function:
    Timeout: 40
    MemorySize: !FindInMap [ MemorySizeMapping, Environment, !Ref 'Environment' ]
    Architectures:
      - arm64
    Environment:
      Variables:
        JAVA_TOOL_OPTIONS: -XX:+TieredCompilation -XX:TieredStopAtLevel=1
        AWS_STACK_NAME: !Sub ${AWS::StackName}

Mappings:

  ProvisionedConcurrency:
    Environment:
      dev: 0
      build: 0
      staging: 1
      integration: 1
      production: 1

  MemorySizeMapping:
    Environment:
      dev: 512
      build: 1024
      staging: 1024
      integration: 1024
      production: 2048

Resources:
  IPVCriUKPassportPrivateAPI:
    Type: AWS::Serverless::Api
    Properties:
      # checkov:skip=CKV_AWS_120: We are not implementing API Gateway caching at the time.
      Name: !Sub IPV Passport Back Private API Gateway ${AWS::StackName}
      EndpointConfiguration:
        Type: PRIVATE
      Auth:
        ResourcePolicy:
          CustomStatements:
            - Action: 'execute-api:Invoke'
              Effect: Allow
              Principal: '*'
              Resource:
                - 'execute-api:/*'
            - Action: 'execute-api:Invoke'
              Effect: Deny
              Principal: '*'
              Resource:
                - 'execute-api:/*'
              Condition:
                StringNotEquals:
                  'aws:SourceVpce': !If
                    - IsDevelopmentEnvironment
                    - !ImportValue "networking-shared-development-ApiGatewayVpcEndpointId"
                    - Fn::ImportValue:
                        !Sub "networking-${Environment}-ApiGatewayVpcEndpointId"
              # VPC configurations need compared before switching
              #Condition:
              #  StringNotEquals:
              #    aws:SourceVpce: !If
              #      - CreateDevResources
              #      - vpce-082cab7c78139eb54
              #      - !ImportValue cri-vpc-ApiGatewayVpcEndpointId
      StageName: !Sub ${Environment}
      TracingEnabled: true
      AccessLogSetting:
        DestinationArn: !GetAtt IPVCriUKPassportPrivateAPILogGroup.Arn
        Format: >-
          {
          "requestId":"$context.requestId",
          "ip":"$context.identity.sourceIp",
          "requestTime":"$context.requestTime",
          "httpMethod":"$context.httpMethod",
          "path":"$context.path",
          "routeKey":"$context.routeKey",
          "status":"$context.status",
          "protocol":"$context.protocol",
          "responseLatency":"$context.responseLatency",
          "responseLength":"$context.responseLength"
          }

  IPVCriUKPassportPrivateAPILogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/apigateway/${AWS::StackName}-PassportBackPrivate-API-GW-AccessLogs
      RetentionInDays: 14
      KmsKeyId: !GetAtt LoggingKmsKey.Arn

  IPVCriUKPassportPrivateAPILogGroupSubscriptionFilter:
    Type: AWS::Logs::SubscriptionFilter
    Condition: IsNotDevelopmentEnvironment
    Properties:
      DestinationArn: "arn:aws:logs:eu-west-2:885513274347:destination:csls_cw_logs_destination_prod"
      FilterPattern: ""
      LogGroupName: !Ref IPVCriUKPassportPrivateAPILogGroup

  PublicUKPassportAPI:
    Type: AWS::Serverless::Api
    Properties:
      # checkov:skip=CKV_AWS_120: We are not implementing API Gateway caching at the time.
      Name: !Sub ${AWS::StackName}-PublicUKPassportApi
      Description: Public UK Passport CRI API
      StageName: !Sub ${Environment}
      TracingEnabled: true
      Auth:
        ApiKeyRequired: true
        UsagePlan:
          CreateUsagePlan: PER_API
      AccessLogSetting:
        DestinationArn: !GetAtt PublicUKPassportAPILogGroup.Arn
        Format: >-
          {
          "requestId":"$context.requestId",
          "ip":"$context.identity.sourceIp",
          "requestTime":"$context.requestTime",
          "httpMethod":"$context.httpMethod",
          "path":"$context.path",
          "routeKey":"$context.routeKey",
          "status":"$context.status",
          "protocol":"$context.protocol",
          "responseLatency":"$context.responseLatency",
          "responseLength":"$context.responseLength"
          }

  PublicUKPassportAPILogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/apigateway/${AWS::StackName}-CriPassport-API-GW-AccessLogs
      RetentionInDays: 14
      KmsKeyId: !GetAtt LoggingKmsKey.Arn

  PublicUKPassportAPILogGroupSubscriptionFilter:
    Type: AWS::Logs::SubscriptionFilter
    Condition: IsNotDevelopmentEnvironment
    Properties:
      DestinationArn: "arn:aws:logs:eu-west-2:885513274347:destination:csls_cw_logs_destination_prod"
      FilterPattern: ""
      LogGroupName: !Ref PublicUKPassportAPILogGroup

  IPVCriUKPassportIssueCredentialFunction:
    Type: AWS::Serverless::Function
    DependsOn:
      - "IPVCriUKPassportIssueCredentialFunctionLogGroup"
    Properties:
      # checkov:skip=CKV_AWS_115: We do not have enough data to allocate the concurrent execution allowance per function.
      # checkov:skip=CKV_AWS_116: Lambdas invoked via API Gateway do not support Dead Letter Queues.
      # checkov:skip=CKV_AWS_117: Lambdas will migrate to our own VPC in future work.
      Handler: uk.gov.di.ipv.cri.passport.issuecredential.IssueCredentialHandler::handleRequest
      Runtime: java11
      PackageType: Zip
      CodeUri: ../../lambdas/issuecredential
      Environment:
        # checkov:skip=CKV_AWS_173: These environment variables do not require encryption.
        Variables:
          ENVIRONMENT: !Sub "${Environment}"
          DCS_RESPONSE_TABLE_NAME: !Select [1, !Split ['/', !GetAtt DCSResponseTable.Arn]]
          CRI_PASSPORT_ACCESS_TOKENS_TABLE_NAME: !Select [1, !Split ['/', !GetAtt CRIPassportAccessTokensTable.Arn]]
          SQS_AUDIT_EVENT_QUEUE_URL: !ImportValue AuditEventQueueUrl
          CREDENTIAL_ISSUERS_CONFIG_PARAM_PREFIX: !Sub "/${AWS::StackName}/credentialIssuers/ukPassport/clients"
          PASSPORT_BACK_SESSIONS_TABLE_NAME: !Ref CRIPassportBackSessionsTable
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref DCSResponseTable
        - DynamoDBCrudPolicy:
            TableName: !Ref CRIPassportAccessTokensTable
        - DynamoDBCrudPolicy:
            TableName: !Ref CRIPassportBackSessionsTable
        - SSMParameterReadPolicy:
            ParameterName: !Sub ${AWS::StackName}/credentialIssuers/ukPassport/self/verifiableCredentialKmsSigningKeyId
        - SSMParameterReadPolicy:
            ParameterName: !Sub ${AWS::StackName}/credentialIssuers/ukPassport/self/verifiableCredentialIssuer
        - SSMParameterReadPolicy:
            ParameterName: !Sub ${AWS::StackName}/credentialIssuers/ukPassport/self/maxJwtTtl
        - SSMParameterReadPolicy:
            ParameterName: !Sub ${AWS::StackName}/credentialIssuers/ukPassport/self/backendSessionTtl
        - SSMParameterReadPolicy:
            ParameterName: !Sub ${AWS::StackName}/credentialIssuers/ukPassport/clients/*
        - SQSSendMessagePolicy:
            QueueName: !ImportValue AuditEventQueueName
        - Statement:
            - Sid: kmsSigningKeyPermission
              Effect: Allow
              Action:
                - 'kms:sign'
              Resource:
                - !ImportValue PassportCriVcSigningKeyArn
            - Sid: auditEventQueueKmsEncryptionKeyPermission
              Effect: Allow
              Action:
                - 'kms:Decrypt'
                - 'kms:GenerateDataKey'
              Resource:
                - !ImportValue AuditEventQueueEncryptionKeyArn
      Events:
        PublicUKPassportAPI:
          Type: Api
          Properties:
            RestApiId: !Ref PublicUKPassportAPI
            Path: /credentials/issue
            Method: POST
      AutoPublishAlias: live
      ProvisionedConcurrencyConfig:
        !If
          - AddProvisionedConcurrency
          - ProvisionedConcurrentExecutions: !FindInMap [ProvisionedConcurrency, Environment, !Ref 'Environment']
          - !Ref AWS::NoValue

  IPVCriUKPassportIssueCredentialFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      RetentionInDays: 14
      LogGroupName: !Sub "/aws/lambda/ipv-passport-issue-credential-${AWS::StackName}"
      KmsKeyId: !GetAtt LoggingKmsKey.Arn

  IPVCriUKPassportIssueCredentialFunctionLogGroupSubscriptionFilter:
    Type: AWS::Logs::SubscriptionFilter
    Condition: IsNotDevelopmentEnvironment
    Properties:
      DestinationArn: "arn:aws:logs:eu-west-2:885513274347:destination:csls_cw_logs_destination_prod"
      FilterPattern: ""
      LogGroupName: !Ref IPVCriUKPassportIssueCredentialFunctionLogGroup

  IPVCriUKPassportIssueCredentialFunctionPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt IPVCriUKPassportIssueCredentialFunction.Arn
      Principal: apigateway.amazonaws.com

  IPVCriUKPassportAccessTokenFunction:
    Type: AWS::Serverless::Function
    DependsOn:
      - "IPVCriUKPassportAccessTokenFunctionLogGroup"
    Properties:
      # checkov:skip=CKV_AWS_115: We do not have enough data to allocate the concurrent execution allowance per function.
      # checkov:skip=CKV_AWS_116: Lambdas invoked via API Gateway do not support Dead Letter Queues.
      # checkov:skip=CKV_AWS_117: Lambdas will migrate to our own VPC in future work.
      Handler: uk.gov.di.ipv.cri.passport.accesstoken.AccessTokenHandler::handleRequest
      Runtime: java11
      PackageType: Zip
      CodeUri: ../../lambdas/accesstoken
      Environment:
        # checkov:skip=CKV_AWS_173: These environment variables do not require encryption.
        Variables:
          ENVIRONMENT: !Sub "${Environment}"
          CRI_PASSPORT_AUTH_CODES_TABLE_NAME: !Select [1, !Split ['/', !GetAtt CRIPassportAuthCodesTable.Arn]]
          CRI_PASSPORT_ACCESS_TOKENS_TABLE_NAME: !Select [1, !Split ['/', !GetAtt CRIPassportAccessTokensTable.Arn]]
          CRI_PASSPORT_CLIENT_AUTH_JWT_IDS_TABLE_NAME: !Ref CRIPassportClientAuthJwtIdsTable
          CREDENTIAL_ISSUERS_CONFIG_PARAM_PREFIX: !Sub "/${AWS::StackName}/credentialIssuers/ukPassport/clients"
          PASSPORT_CRI_CLIENT_AUTH_MAX_TTL: !Sub "/${AWS::StackName}/credentialIssuers/ukPassport/self/maxJwtTtl"
          PASSPORT_CRI_CLIENT_AUDIENCE: !Sub "/${AWS::StackName}/credentialIssuers/ukPassport/self/audienceForClients"
          PASSPORT_BACK_SESSIONS_TABLE_NAME: !Ref CRIPassportBackSessionsTable
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref CRIPassportAuthCodesTable
        - DynamoDBCrudPolicy:
            TableName: !Ref CRIPassportAccessTokensTable
        - DynamoDBCrudPolicy:
            TableName: !Ref CRIPassportClientAuthJwtIdsTable
        - DynamoDBCrudPolicy:
            TableName: !Ref CRIPassportBackSessionsTable
        - SSMParameterReadPolicy:
            ParameterName: !Sub ${AWS::StackName}/credentialIssuers/ukPassport/self/audienceForClients
        - SSMParameterReadPolicy:
            ParameterName: !Sub ${AWS::StackName}/credentialIssuers/ukPassport/self/maxJwtTtl
        - SSMParameterReadPolicy:
            ParameterName: !Sub ${AWS::StackName}/credentialIssuers/ukPassport/self/backendSessionTtl
        - SSMParameterReadPolicy:
            ParameterName: !Sub ${AWS::StackName}/credentialIssuers/ukPassport/self/authCodeExpirySeconds
        - SSMParameterReadPolicy:
            ParameterName: !Sub ${AWS::StackName}/credentialIssuers/ukPassport/clients
        - SSMParameterReadPolicy:
            ParameterName: !Sub ${AWS::StackName}/credentialIssuers/ukPassport/clients/*
      Events:
        PublicUKPassportAPI:
          Type: Api
          Properties:
            RestApiId: !Ref PublicUKPassportAPI
            Path: /token
            Method: POST
      AutoPublishAlias: live
      ProvisionedConcurrencyConfig:
        !If
          - AddProvisionedConcurrency
          - ProvisionedConcurrentExecutions: !FindInMap [ProvisionedConcurrency, Environment, !Ref 'Environment']
          - !Ref AWS::NoValue

  IPVCriUKPassportAccessTokenFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      RetentionInDays: 14
      LogGroupName: !Sub "/aws/lambda/ipv-passport-token-${AWS::StackName}"
      KmsKeyId: !GetAtt LoggingKmsKey.Arn

  IPVCriUKPassportAccessTokenFunctionLogGroupSubscriptionFilter:
    Type: AWS::Logs::SubscriptionFilter
    Condition: IsNotDevelopmentEnvironment
    Properties:
      DestinationArn: "arn:aws:logs:eu-west-2:885513274347:destination:csls_cw_logs_destination_prod"
      FilterPattern: ""
      LogGroupName: !Ref IPVCriUKPassportAccessTokenFunctionLogGroup

  IPVCriUKPassportAccessTokenFunctionPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt IPVCriUKPassportAccessTokenFunction.Arn
      Principal: apigateway.amazonaws.com

  IPVCriUKPassportCheckPassportFunction:
    Type: AWS::Serverless::Function
    DependsOn:
      - "IPVCriUKPassportCheckPassportFunctionLogGroup"
    Properties:
      # checkov:skip=CKV_AWS_115: We do not have enough data to allocate the concurrent execution allowance per function.
      # checkov:skip=CKV_AWS_116: Lambdas invoked via API Gateway do not support Dead Letter Queues.
      # checkov:skip=CKV_AWS_117: Lambdas will migrate to our own VPC in future work.
      Handler: uk.gov.di.ipv.cri.passport.checkpassport.CheckPassportHandler::handleRequest
      Runtime: java11
      PackageType: Zip
      CodeUri: ../../lambdas/checkpassport
      Environment:
        # checkov:skip=CKV_AWS_173: These environment variables do not require encryption.
        Variables:
          ENVIRONMENT: !Sub "${Environment}"
          DCS_RESPONSE_TABLE_NAME: !Select [1, !Split ['/', !GetAtt DCSResponseTable.Arn]]
          CRI_PASSPORT_ACCESS_TOKENS_TABLE_NAME: !Select [1, !Split ['/', !GetAtt CRIPassportAccessTokensTable.Arn]]
          CREDENTIAL_ISSUERS_CONFIG_PARAM_PREFIX: !Sub "/${AWS::StackName}/credentialIssuers/ukPassport/clients"
          SQS_AUDIT_EVENT_QUEUE_URL: !ImportValue AuditEventQueueUrl
          PASSPORT_BACK_SESSIONS_TABLE_NAME: !Ref CRIPassportBackSessionsTable
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref DCSResponseTable
        - DynamoDBCrudPolicy:
            TableName: !Ref CRIPassportAccessTokensTable
        - DynamoDBCrudPolicy:
            TableName: !Ref CRIPassportBackSessionsTable
        - SSMParameterReadPolicy:
            ParameterName: !Sub ${AWS::StackName}/credentialIssuers/ukPassport/*
        - SSMParameterReadPolicy:
            ParameterName: !Sub ${AWS::StackName}/credentialIssuers/ukPassport/self/backendSessionTtl
        - SQSSendMessagePolicy:
            QueueName: !ImportValue AuditEventQueueName
        - Statement:
            - Sid: auditEventQueueKmsEncryptionKeyPermission
              Effect: Allow
              Action:
                - 'kms:Decrypt'
                - 'kms:GenerateDataKey'
              Resource:
                - !ImportValue AuditEventQueueEncryptionKeyArn
      Events:
        IPVCriUKPassportPrivateAPIDeprecate:
          Type: Api
          Properties:
            RestApiId: !Ref IPVCriUKPassportPrivateAPI
            Path: /authorization
            Method: POST
        IPVCriUKPassportPrivateAPI:
          Type: Api
          Properties:
            RestApiId: !Ref IPVCriUKPassportPrivateAPI
            Path: /check-passport
            Method: POST
      AutoPublishAlias: live
      ProvisionedConcurrencyConfig:
        !If
          - AddProvisionedConcurrency
          - ProvisionedConcurrentExecutions: !FindInMap [ProvisionedConcurrency, Environment, !Ref 'Environment']
          - !Ref AWS::NoValue

  IPVCriUKPassportCheckPassportFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      RetentionInDays: 14
      LogGroupName: !Sub "/aws/lambda/ipv-passport-check-passport-${AWS::StackName}"
      KmsKeyId: !GetAtt LoggingKmsKey.Arn

  IPVCriUKPassportCheckPassportFunctionLogGroupSubscriptionFilter:
    Type: AWS::Logs::SubscriptionFilter
    Condition: IsNotDevelopmentEnvironment
    Properties:
      DestinationArn: "arn:aws:logs:eu-west-2:885513274347:destination:csls_cw_logs_destination_prod"
      FilterPattern: ""
      LogGroupName: !Ref IPVCriUKPassportCheckPassportFunctionLogGroup

  IPVCriUKPassportCheckPassportFunctionPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt IPVCriUKPassportCheckPassportFunction.Arn
      Principal: apigateway.amazonaws.com

  IPVCriUKPassportBuildClientOauthResponseFunction:
    Type: AWS::Serverless::Function
    DependsOn:
      - "IPVCriUKPassportBuildClientOauthResponseFunctionLogGroup"
    Properties:
      # checkov:skip=CKV_AWS_115: We do not have enough data to allocate the concurrent execution allowance per function.
      # checkov:skip=CKV_AWS_116: Lambdas invoked via API Gateway do not support Dead Letter Queues.
      # checkov:skip=CKV_AWS_117: Lambdas will migrate to our own VPC in future work.
      Handler: uk.gov.di.ipv.cri.passport.buildclientoauthresponse.BuildClientOauthResponseHandler::handleRequest
      Runtime: java11
      PackageType: Zip
      CodeUri: ../../lambdas/buildclientoauthresponse
      Environment:
        # checkov:skip=CKV_AWS_173: These environment variables do not require encryption.
        Variables:
          ENVIRONMENT: !Sub "${Environment}"
          CRI_PASSPORT_AUTH_CODES_TABLE_NAME: !Ref CRIPassportAuthCodesTable
          PASSPORT_BACK_SESSIONS_TABLE_NAME: !Ref CRIPassportBackSessionsTable
          SQS_AUDIT_EVENT_QUEUE_URL: !ImportValue AuditEventQueueUrl
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref CRIPassportAuthCodesTable
        - DynamoDBCrudPolicy:
            TableName: !Ref CRIPassportBackSessionsTable
        - SSMParameterReadPolicy:
            ParameterName: !Sub ${AWS::StackName}/credentialIssuers/ukPassport/self/backendSessionTtl
        - SQSSendMessagePolicy:
            QueueName: !ImportValue AuditEventQueueName
        - Statement:
            - Sid: auditEventQueueKmsEncryptionKeyPermission
              Effect: Allow
              Action:
                - 'kms:Decrypt'
                - 'kms:GenerateDataKey'
              Resource:
                - !ImportValue AuditEventQueueEncryptionKeyArn
      Events:
        IPVCriUKPassportPrivateAPI:
          Type: Api
          Properties:
            RestApiId: !Ref IPVCriUKPassportPrivateAPI
            Path: /build-client-oauth-response
            Method: POST
      AutoPublishAlias: live
      ProvisionedConcurrencyConfig:
        !If
        - AddProvisionedConcurrency
        - ProvisionedConcurrentExecutions: !FindInMap [ProvisionedConcurrency, Environment, !Ref 'Environment']
        - !Ref AWS::NoValue

  IPVCriUKPassportBuildClientOauthResponseFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      RetentionInDays: 14
      LogGroupName: !Sub "/aws/lambda/ipv-passport-build-client-oauth-response-${AWS::StackName}"
      KmsKeyId: !GetAtt LoggingKmsKey.Arn

  IPVCriUKPassportBuildClientOauthResponseFunctionLogGroupSubscriptionFilter:
    Type: AWS::Logs::SubscriptionFilter
    Condition: IsNotDevelopmentEnvironment
    Properties:
      DestinationArn: "arn:aws:logs:eu-west-2:885513274347:destination:csls_cw_logs_destination_prod"
      FilterPattern: ""
      LogGroupName: !Ref IPVCriUKPassportBuildClientOauthResponseFunctionLogGroup

  IPVCriUKPassportBuildClientOauthResponseFunctionPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt IPVCriUKPassportBuildClientOauthResponseFunction.Arn
      Principal: apigateway.amazonaws.com

  IPVCriUKPassportInitialiseSessionFunction:
    Type: AWS::Serverless::Function
    DependsOn:
      - "IPVCriUKPassportInitialiseSessionFunctionLogGroup"
    Properties:
      # checkov:skip=CKV_AWS_115: We do not have enough data to allocate the concurrent execution allowance per function.
      # checkov:skip=CKV_AWS_116: Lambdas invoked via API Gateway do not support Dead Letter Queues.
      # checkov:skip=CKV_AWS_117: Lambdas will migrate to our own VPC in future work.
      Handler: uk.gov.di.ipv.cri.passport.initialisesession.InitialiseSessionHandler::handleRequest
      Runtime: java11
      PackageType: Zip
      CodeUri: ../../lambdas/initialisesession
      Environment:
        # checkov:skip=CKV_AWS_173: These environment variables do not require encryption.
        Variables:
          ENVIRONMENT: !Sub "${Environment}"
          PASSPORT_BACK_SESSIONS_TABLE_NAME: !Select [ 1, !Split [ '/', !GetAtt CRIPassportBackSessionsTable.Arn ] ]
          CREDENTIAL_ISSUERS_CONFIG_PARAM_PREFIX: !Sub "/${AWS::StackName}/credentialIssuers/ukPassport/clients"
          SQS_AUDIT_EVENT_QUEUE_URL: !ImportValue AuditEventQueueUrl
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref CRIPassportBackSessionsTable
        - SSMParameterReadPolicy:
            ParameterName: !Sub "${AWS::StackName}/credentialIssuers/ukPassport/clients/*"
        - SSMParameterReadPolicy:
            ParameterName: !Sub ${AWS::StackName}/credentialIssuers/ukPassport/clients
        - SSMParameterReadPolicy:
            ParameterName: !Sub ${AWS::StackName}/credentialIssuers/ukPassport/self/maxJwtTtl
        - SSMParameterReadPolicy:
            ParameterName: !Sub ${AWS::StackName}/credentialIssuers/ukPassport/self/audienceForClients
        - SSMParameterReadPolicy:
            ParameterName: !Sub ${AWS::StackName}/credentialIssuers/ukPassport/self/jarKmsEncryptionKeyId
        - SSMParameterReadPolicy:
            ParameterName: !Sub ${AWS::StackName}/credentialIssuers/ukPassport/self/jarKmsEncryptionPublicKey
        - SSMParameterReadPolicy:
            ParameterName: !Sub ${AWS::StackName}/credentialIssuers/ukPassport/self/backendSessionTtl
        - SQSSendMessagePolicy:
            QueueName: !ImportValue AuditEventQueueName
        - Statement:
            - Sid: jarKmsEncryptionKeyPermission
              Effect: Allow
              Action:
                - 'kms:Decrypt'
                - 'kms:GenerateDataKey'
              Resource:
                - !ImportValue PassportCriEncryptionKeyArn
            - Sid: auditEventQueueKmsEncryptionKeyPermission
              Effect: Allow
              Action:
                - 'kms:Decrypt'
                - 'kms:GenerateDataKey'
              Resource:
                - !ImportValue AuditEventQueueEncryptionKeyArn
      Events:
        IPVCriUKPassportPrivateAPI:
          Type: Api
          Properties:
            RestApiId: !Ref IPVCriUKPassportPrivateAPI
            Path: /initialise-session
            Method: POST
      AutoPublishAlias: live
      ProvisionedConcurrencyConfig:
        !If
        - AddProvisionedConcurrency
        - ProvisionedConcurrentExecutions: !FindInMap [ProvisionedConcurrency, Environment, !Ref 'Environment']
        - !Ref AWS::NoValue

  IPVCriUKPassportInitialiseSessionFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      RetentionInDays: 14
      LogGroupName: !Sub "/aws/lambda/ipv-passport-initialise-session-${AWS::StackName}"
      KmsKeyId: !GetAtt LoggingKmsKey.Arn

  IPVCriUKPassportInitialiseSessionFunctionLogGroupSubscriptionFilter:
    Type: AWS::Logs::SubscriptionFilter
    Condition: IsNotDevelopmentEnvironment
    Properties:
      DestinationArn: "arn:aws:logs:eu-west-2:885513274347:destination:csls_cw_logs_destination_prod"
      FilterPattern: ""
      LogGroupName: !Ref IPVCriUKPassportInitialiseSessionFunctionLogGroup

  IPVCriUKPassportInitialiseSessionFunctionPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt IPVCriUKPassportInitialiseSessionFunction.Arn
      Principal: apigateway.amazonaws.com

  DCSResponseTable:
    Type: AWS::DynamoDB::Table
    # checkov:skip=CKV_AWS_28: Point in time recovery is not necessary for this table.
    Properties:
      TableName: !Sub "di-ipv-cri-passport-back-${AWS::StackName}-dcs-response"
      BillingMode: "PAY_PER_REQUEST"
      AttributeDefinitions:
        - AttributeName: "resourceId"
          AttributeType: "S"
      KeySchema:
        - AttributeName: "resourceId"
          KeyType: "HASH"
      TimeToLiveSpecification:
        AttributeName: "ttl"
        Enabled: true
      SSESpecification:
        # checkov:skip=CKV_AWS_119: Implement Customer Managed Keys in PYIC-1391
        SSEEnabled: true
        SSEType: KMS

  CRIPassportAuthCodesTable:
    Type: AWS::DynamoDB::Table
    # checkov:skip=CKV_AWS_28: Point in time recovery is not necessary for this table.
    Properties:
      TableName: !Sub "di-ipv-cri-passport-back-${AWS::StackName}-auth-codes"
      BillingMode: "PAY_PER_REQUEST"
      AttributeDefinitions:
        - AttributeName: "authCode"
          AttributeType: "S"
      KeySchema:
        - AttributeName: "authCode"
          KeyType: "HASH"
      TimeToLiveSpecification:
        AttributeName: "ttl"
        Enabled: true
      SSESpecification:
        # checkov:skip=CKV_AWS_119: Implement Customer Managed Keys in PYIC-1391
        SSEEnabled: true
        SSEType: KMS

  CRIPassportAccessTokensTable:
    Type: AWS::DynamoDB::Table
    # checkov:skip=CKV_AWS_28: Point in time recovery is not necessary for this table.
    Properties:
      TableName: !Sub "di-ipv-cri-passport-back-${AWS::StackName}-accessToken"
      BillingMode: "PAY_PER_REQUEST"
      AttributeDefinitions:
        - AttributeName: "accessToken"
          AttributeType: "S"
      KeySchema:
        - AttributeName: "accessToken"
          KeyType: "HASH"
      TimeToLiveSpecification:
        AttributeName: "ttl"
        Enabled: true
      SSESpecification:
        # checkov:skip=CKV_AWS_119: Implement Customer Managed Keys in PYIC-1391
        SSEEnabled: true
        SSEType: KMS

  CRIPassportClientAuthJwtIdsTable:
    Type: AWS::DynamoDB::Table
    # checkov:skip=CKV_AWS_28: Point in time recovery is not necessary for this table.
    Properties:
      TableName: !Sub "di-ipv-cri-passport-back-${AWS::StackName}-client-auth-jwt-ids"
      BillingMode: "PAY_PER_REQUEST"
      AttributeDefinitions:
        - AttributeName: "jwtId"
          AttributeType: "S"
      KeySchema:
        - AttributeName: "jwtId"
          KeyType: "HASH"
      TimeToLiveSpecification:
        AttributeName: "ttl"
        Enabled: true
      SSESpecification:
        # checkov:skip=CKV_AWS_119: Implement Customer Managed Keys in PYIC-1391
        SSEEnabled: true
        SSEType: KMS

  CRIPassportBackSessionsTable:
    Type: AWS::DynamoDB::Table
    # checkov:skip=CKV_AWS_28: Point in time recovery is not necessary for this table.
    Properties:
      TableName: !Sub "di-ipv-cri-passport-back-${AWS::StackName}-sessions"
      BillingMode: "PAY_PER_REQUEST"
      AttributeDefinitions:
        - AttributeName: "passportSessionId"
          AttributeType: "S"
      KeySchema:
        - AttributeName: "passportSessionId"
          KeyType: "HASH"
      TimeToLiveSpecification:
        AttributeName: "ttl"
        Enabled: true
      SSESpecification:
        # checkov:skip=CKV_AWS_119: Implement Customer Managed Keys in PYIC-1391
        SSEEnabled: true
        SSEType: KMS

  LoggingKmsKey:
    Type: AWS::KMS::Key
    Properties:
      EnableKeyRotation: true
      KeyPolicy:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              AWS: !Sub "arn:aws:iam::${AWS::AccountId}:root"
            Action:
              - kms:*
            Resource: "*"
          - Effect: Allow
            Principal:
              Service: !Sub "logs.${AWS::Region}.amazonaws.com"
            Action:
              - "kms:Encrypt*"
              - "kms:Decrypt*"
              - "kms:ReEncrypt*"
              - "kms:GenerateDataKey*"
              - "kms:Describe*"
            Resource: "*"
            Condition:
              ArnLike:
                "kms:EncryptionContext:aws:logs:arn": !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:*"

Outputs:
  StackName:
    Description: "CloudFormation stack name"
    Value: !Sub "${AWS::StackName}"

  PublicUKPassportAPIGatewayID:
    Description: CRI UK Passport API Gateway ID
    Value: !Sub "${PublicUKPassportAPI}"
    Export:
      Name: !Sub ${AWS::StackName}-PublicUKPassportAPIGatewayID

  IPVCriUkPassportPrivateAPIGatewayID:
    Description: CRI UK Passport Private API Gateway ID
    Value: !Sub "${IPVCriUKPassportPrivateAPI}"
    Export:
      Name: !Sub ${AWS::StackName}-IPVCriUkPassportPrivateAPIGatewayID

  IpvCoreBackApiKeyId:
    Description: The key id of the api key used by IPV Core to access passport back external api gateway
    Value: !Ref PublicUKPassportAPIApiKey
