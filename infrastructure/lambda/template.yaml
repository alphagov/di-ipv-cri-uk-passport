AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Digital Identity Passport Credential Issuer API

Parameters:
  CodeSigningEnabled:
    Type: "String"
    Default: "false"
  CodeSigningConfigArn:
    Type: String
    Default: "none"
    Description: >
      The ARN of the Code Signing Config to use, provided by the deployment pipeline
  Environment:
    Description: "The environment type"
    Type: "String"
    AllowedValues:
      - "dev"
      - "build"
      - "staging"
      - "integration"
      - "production"
    ConstraintDescription: must be dev, build, staging, integration or production

Conditions:
  EnforceCodeSigning: !Equals
    - !Ref  CodeSigningEnabled
    - true
  CreateDevResources: !Equals
    - !Ref Environment
    - dev
  IsProdEnvironment: !Equals
    - !Ref Environment
    - production
  IsStubEnvironment: !Or
    - !Equals [ !Ref Environment, dev]
    - !Equals [ !Ref Environment, build ]
    - !Equals [ !Ref Environment, staging ]
    - !Equals [ !Ref Environment, integration ]
  IsProdLikeEnvironment: !Or
    - !Equals [ !Ref Environment, staging ]
    - !Equals [ !Ref Environment, integration ]
    - !Equals [ !Ref Environment, production ]
  IsDevEnvironment: !Equals
    - !Ref Environment
    - dev
  IsNotDevEnvironment: !Not
    - Condition: IsDevEnvironment

  AddProvisionedConcurrency: !Not
    - !Equals
      - !FindInMap [ProvisionedConcurrency, Environment, !Ref 'Environment']
      -  0

Globals:
  Function:
# Dev Platform VPC
#    VpcConfig:
#      SecurityGroupIds:
#        - !ImportValue cri-vpc-LambdaSecurityGroup
#      SubnetIds: !Split [ ",", !ImportValue cri-vpc-PrivateSubnets ]
    CodeSigningConfigArn: !If
      - CreateDevResources
      - !Ref AWS::NoValue
      - !Ref CodeSigningConfigArn
    Timeout: 40
    MemorySize: !FindInMap [ MemorySizeMapping, Environment, !Ref 'Environment' ]
    Architectures:
      - arm64
    Environment:
      Variables:
        JAVA_TOOL_OPTIONS: -XX:+TieredCompilation -XX:TieredStopAtLevel=1
        AWS_STACK_NAME: !Sub ${AWS::StackName}

Mappings:

  AuthCodeExpirySeconds:
    Environment:
      dev: 600
      build: 600
      staging: 600
      integration: 600
      production: 600

  MaximumAttemptCount:
    Environment:
      dev: 2
      build: 2
      staging: 2
      integration: 2
      production: 2

  ProvisionedConcurrency:
    Environment:
      dev: 0
      build: 0
      staging: 1
      integration: 1
      production: 1

  MemorySizeMapping:
    Environment:
      dev: 512
      build: 1024
      staging: 1024
      integration: 1024
      production: 2048

  SessionTtlMapping:
    Environment:
      dev: "172800" # 2 days
      build: "172800" # 2 days
      staging: "172800" # 2 days
      integration: "172800" # 2 days
      production: "172800" # 2 days

  MaxJwtTtlMapping:
    Environment:
      dev: "7200" # 2 hrs
      build: "7200"
      staging: "7200"
      integration: "7200"
      production: "7200"

  IPVCoreStubAuthenticationAlgMapping:
    Environment:
      dev: "ES256"
      build: "ES256"
      staging: "ES256"
      integration: "ES256"

  IPVCore1AuthenticationAlgMapping:
    Environment:
      staging: "ES256"
      integration: "ES256"
      production: "ES256"

  IPVCoreStubAudienceMapping:
    Environment:
      dev: "https://review-p.dev.account.gov.uk"
      build: "https://review-p.build.account.gov.uk"
      staging: "https://review-p.staging.account.gov.uk"
      integration: "https://review-p.integration.account.gov.uk"

  IPVCore1AudienceMapping:
    Environment:
      staging: "https://review-p.staging.account.gov.uk"
      integration: "https://review-p.integration.account.gov.uk"
      production: "https://review-p.account.gov.uk"

  IPVCoreStubIssuerMapping:
    Environment:
      dev: "https://di-ipv-core-stub.london.cloudapps.digital"
      build: "https://di-ipv-core-stub.london.cloudapps.digital"
      staging: "https://di-ipv-core-stub.london.cloudapps.digital"
      integration: "https://di-ipv-core-stub.london.cloudapps.digital"

  IPVCore1IssuerMapping:
    Environment:
      staging: "https://identity.staging.account.gov.uk"
      integration: "https://identity.integration.account.gov.uk"
      production: "https://identity.account.gov.uk"

  IPVCoreStubPublicSigningJwkBase64Mapping:
    Environment:
      dev: "ewogICAgImt0eSI6ICJFQyIsCiAgICAidXNlIjogInNpZyIsCiAgICAiY3J2IjogIlAtMjU2IiwKICAgICJraWQiOiAiaXB2LWNvcmUtc3R1Yi0yLWZyb20tbWtqd2sub3JnIiwKICAgICJ4IjogImszOXVLYWNTdWtRQnJNWnJIRFRCVVpzbGl2cFhLRE5aVGc2aW5DSHdyTGMiLAogICAgInkiOiAiOEY4TG5RN3dHOWh4c1Q0YXgwQXR5N2lNR0l5aVlfWUdwM19xSVp6S28xQSIsCiAgICAiYWxnIjogIkVTMjU2Igp9"
      build: "ewogICAgImt0eSI6ICJFQyIsCiAgICAidXNlIjogInNpZyIsCiAgICAiY3J2IjogIlAtMjU2IiwKICAgICJraWQiOiAiaXB2LWNvcmUtc3R1Yi0yLWZyb20tbWtqd2sub3JnIiwKICAgICJ4IjogImszOXVLYWNTdWtRQnJNWnJIRFRCVVpzbGl2cFhLRE5aVGc2aW5DSHdyTGMiLAogICAgInkiOiAiOEY4TG5RN3dHOWh4c1Q0YXgwQXR5N2lNR0l5aVlfWUdwM19xSVp6S28xQSIsCiAgICAiYWxnIjogIkVTMjU2Igp9"
      staging: "ewogICAgImt0eSI6ICJFQyIsCiAgICAidXNlIjogInNpZyIsCiAgICAiY3J2IjogIlAtMjU2IiwKICAgICJraWQiOiAiaXB2LWNvcmUtc3R1Yi0yLWZyb20tbWtqd2sub3JnIiwKICAgICJ4IjogImszOXVLYWNTdWtRQnJNWnJIRFRCVVpzbGl2cFhLRE5aVGc2aW5DSHdyTGMiLAogICAgInkiOiAiOEY4TG5RN3dHOWh4c1Q0YXgwQXR5N2lNR0l5aVlfWUdwM19xSVp6S28xQSIsCiAgICAiYWxnIjogIkVTMjU2Igp9"
      integration: "ewogICAgImt0eSI6ICJFQyIsCiAgICAidXNlIjogInNpZyIsCiAgICAiY3J2IjogIlAtMjU2IiwKICAgICJraWQiOiAiaXB2LWNvcmUtc3R1Yi0yLWZyb20tbWtqd2sub3JnIiwKICAgICJ4IjogImszOXVLYWNTdWtRQnJNWnJIRFRCVVpzbGl2cFhLRE5aVGc2aW5DSHdyTGMiLAogICAgInkiOiAiOEY4TG5RN3dHOWh4c1Q0YXgwQXR5N2lNR0l5aVlfWUdwM19xSVp6S28xQSIsCiAgICAiYWxnIjogIkVTMjU2Igp9"

  IPVCore1PublicSigningJwkBase64Mapping:
    Environment:
      staging: "eyJrdHkiOiJFQyIsImNydiI6IlAtMjU2IiwieCI6ImtlMVRNRnFNb0Z5eHg1eXpOdFFRbGw0dk9yeHZUdFBKQ0huUzRqOHpoMlUiLCJ5IjoicURLX0g4QXpKS2FIbU1zaHg5TGp2LTB0ek5rV2EtSkVHUzJtZHRKUjFPQSJ9"
      integration: "eyJrdHkiOiJFQyIsImNydiI6IlAtMjU2IiwieCI6IkJUUWdWQjU0RE9JcDU0eGRVSVg0SGtUX3pCdjZHdVdMV1RUTkdxMk15dEkiLCJ5IjoiTFFRamx5ZEtOMUhXZFJQcFBpalJObEJrbi1qaDgzZzBBUmIyNms2WVh1byJ9"
      production: "eyJrdHkiOiJFQyIsImNydiI6IlAtMjU2IiwieCI6IlVQdlU1TlBtRUxyV2lXU01WZkREN0c4dTNFSllyeXFQSVo0Nlc5TUFsUmMiLCJ5Ijoicjc3RjItS1BocHZUSUdFV2d0NVNtYXZTdkJVSENxV1V4RDZSR19GSkhWayJ9"

  IPVCoreStubRedirectURIMapping:
    Environment:
      dev: "http://localhost:8085/callback"
      build: "https://di-ipv-core-stub.london.cloudapps.digital/callback"
      staging: "https://di-ipv-core-stub.london.cloudapps.digital/callback"
      integration: "https://di-ipv-core-stub.london.cloudapps.digital/callback"

  IPVCore1RedirectURIMapping:
    Environment:
      staging: "https://identity.staging.account.gov.uk/credential-issuer/callback?id=ukPassport"
      integration: "https://identity.integration.account.gov.uk/credential-issuer/callback?id=ukPassport"
      production: "https://identity.account.gov.uk/credential-issuer/callback?id=ukPassport"

  VerifiableCredentialIssuerMapping:
    Environment:
      dev: "https://review-p.dev.account.gov.uk"
      build: "https://review-p.build.account.gov.uk"
      staging: "https://review-p.staging.account.gov.uk"
      integration: "https://review-p.integration.account.gov.uk"
      production: "https://review-p.account.gov.uk"

  PassportCriAudienceMapping:
    Environment:
      dev: "https://review-p.dev.account.gov.uk"
      build: "https://review-p.build.account.gov.uk"
      staging: "https://review-p.staging.account.gov.uk"
      integration: "https://review-p.integration.account.gov.uk"
      production: "https://review-p.account.gov.uk"

Resources:
  PublicUKPassportAPI:
    Type: AWS::Serverless::Api
    Properties:
      # checkov:skip=CKV_AWS_120: We are not implementing API Gateway caching at the time.
      Name: !Sub ${AWS::StackName}-PublicUKPassportApi
      Description: Public UK Passport CRI API
      StageName: !Ref Environment
      TracingEnabled: true
      Auth:
        ApiKeyRequired: true
      AccessLogSetting:
        DestinationArn: !GetAtt PublicUKPassportAPILogGroup.Arn
        Format: >-
          {
          "requestId":"$context.requestId",
          "ip":"$context.identity.sourceIp",
          "requestTime":"$context.requestTime",
          "httpMethod":"$context.httpMethod",
          "path":"$context.path",
          "routeKey":"$context.routeKey",
          "status":"$context.status",
          "protocol":"$context.protocol",
          "responseLatency":"$context.responseLatency",
          "responseLength":"$context.responseLength"
          }
      EndpointConfiguration:
        Type: REGIONAL

  PublicUKPassportAPILogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/apigateway/${AWS::StackName}-${PublicUKPassportAPI}-public-AccessLogs
      RetentionInDays: 365
      KmsKeyId: !GetAtt LoggingKmsKey.Arn

  PublicUKPassportAPILogGroupSubscriptionFilter:
    Type: AWS::Logs::SubscriptionFilter
    Condition: IsNotDevEnvironment
    Properties:
      DestinationArn: "arn:aws:logs:eu-west-2:885513274347:destination:csls_cw_logs_destination_prod"
      FilterPattern: ""
      LogGroupName: !Ref PublicUKPassportAPILogGroup

  PrivateUKPassportAPI:
    Type: AWS::Serverless::Api
    Properties:
      # checkov:skip=CKV_AWS_120: We are not implementing API Gateway caching at the time.
      Name: !Sub ${AWS::StackName}-PrivateUKPassportApi
      Description: Private UK Passport CRI API
      EndpointConfiguration:
        Type: !If [IsNotDevEnvironment, PRIVATE, REGIONAL]
      Auth:
        ResourcePolicy:
          CustomStatements:
            - Action: 'execute-api:Invoke'
              Effect: Allow
              Principal: '*'
              Resource:
                - 'execute-api:/*'
            - Action: 'execute-api:Invoke'
              Effect: !If [IsNotDevEnvironment, Deny, Allow]
              Principal: '*'
              Resource:
                - 'execute-api:/*'
              Condition:
                StringNotEquals:
                  aws:SourceVpce: !If
                    - CreateDevResources
                    - !ImportValue "networking-shared-development-ApiGatewayVpcEndpointId"
                    - Fn::ImportValue:
                        !Sub "networking-${Environment}-ApiGatewayVpcEndpointId"
      StageName: !Ref Environment
      TracingEnabled: true
      AccessLogSetting:
        DestinationArn: !GetAtt PrivateUKPassportAPILogGroup.Arn
        Format: >-
          {
          "requestId":"$context.requestId",
          "ip":"$context.identity.sourceIp",
          "requestTime":"$context.requestTime",
          "httpMethod":"$context.httpMethod",
          "path":"$context.path",
          "routeKey":"$context.routeKey",
          "status":"$context.status",
          "protocol":"$context.protocol",
          "responseLatency":"$context.responseLatency",
          "responseLength":"$context.responseLength"
          }

  PrivateUKPassportAPILogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/apigateway/${AWS::StackName}-${PrivateUKPassportAPI}-private-AccessLogs
      RetentionInDays: 365
      KmsKeyId: !GetAtt LoggingKmsKey.Arn

  PrivateUKPassportAPILogGroupSubscriptionFilter:
    Type: AWS::Logs::SubscriptionFilter
    Condition: IsNotDevEnvironment
    Properties:
      DestinationArn: "arn:aws:logs:eu-west-2:885513274347:destination:csls_cw_logs_destination_prod"
      FilterPattern: ""
      LogGroupName: !Ref PrivateUKPassportAPILogGroup

  IssueCredentialFunction:
    Type: AWS::Serverless::Function
    DependsOn:
      - "IssueCredentialFunctionLogGroup"
    Properties:
      # checkov:skip=CKV_AWS_115: We do not have enough data to allocate the concurrent execution allowance per function.
      # checkov:skip=CKV_AWS_116: Lambdas invoked via API Gateway do not support Dead Letter Queues.
      # checkov:skip=CKV_AWS_117: Lambdas will migrate to our own VPC in future work.
      Handler: uk.gov.di.ipv.cri.passport.issuecredential.IssueCredentialHandler::handleRequest
      Runtime: java11
      PackageType: Zip
      CodeUri: ../../dist/issuecredential.zip
      Environment:
        # checkov:skip=CKV_AWS_173: These environment variables do not require encryption.
        Variables:
          ENVIRONMENT: !Ref Environment
          DCS_RESPONSE_TABLE_NAME: !Select [1, !Split ['/', !GetAtt DCSResponseTable.Arn]]
          CRI_PASSPORT_ACCESS_TOKENS_TABLE_NAME: !Select [1, !Split ['/', !GetAtt AccessTokenTable.Arn]]
          SQS_AUDIT_EVENT_QUEUE_URL: !ImportValue AuditEventQueueUrl
          CREDENTIAL_ISSUERS_CONFIG_PARAM_PREFIX: !Sub "/${AWS::StackName}"
          PASSPORT_BACK_SESSIONS_TABLE_NAME: !Ref SessionTable
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref DCSResponseTable
        - DynamoDBCrudPolicy:
            TableName: !Ref AccessTokenTable
        - DynamoDBCrudPolicy:
            TableName: !Ref SessionTable
        - SSMParameterReadPolicy:
            ParameterName: !Sub "/${AWS::StackName}/verifiableCredentialKmsSigningKeyId"
        - SSMParameterReadPolicy:
            ParameterName: !Sub "${AWS::StackName}/verifiable-credential/issuer"
        - SSMParameterReadPolicy:
            ParameterName: !Sub "${AWS::StackName}/MaxJwtTtl"
        - SSMParameterReadPolicy:
            ParameterName: !Sub "${AWS::StackName}/SessionTtl"
        - SSMParameterReadPolicy:
            ParameterName: !Sub "${AWS::StackName}/clients/*"
        - SQSSendMessagePolicy:
            QueueName: !ImportValue AuditEventQueueName
        - Statement:
            - Sid: kmsSigningKeyPermission
              Effect: Allow
              Action:
                - 'kms:sign'
              Resource: !ImportValue core-infrastructure-CriVcSigningKey1Arn
            - Sid: auditEventQueueKmsEncryptionKeyPermission
              Effect: Allow
              Action:
                - 'kms:Decrypt'
                - 'kms:GenerateDataKey'
              Resource:
                - !ImportValue AuditEventQueueEncryptionKeyArn
        - Statement:
            - Effect: Allow
              Action:
                - ssm:GetParameter
              Resource:
                - !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${AWS::StackName}/verifiableCredentialKmsSigningKeyId"
      Events:
        PublicUKPassportAPI:
          Type: Api
          Properties:
            RestApiId: !Ref PublicUKPassportAPI
            Path: /credential/issue
            Method: POST
      AutoPublishAlias: live
      ProvisionedConcurrencyConfig:
        !If
          - AddProvisionedConcurrency
          - ProvisionedConcurrentExecutions: !FindInMap [ProvisionedConcurrency, Environment, !Ref 'Environment']
          - !Ref AWS::NoValue

  IssueCredentialFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      RetentionInDays: 14
      LogGroupName: !Sub "/aws/lambda/ipv-passport-issue-credential-${AWS::StackName}"
      KmsKeyId: !GetAtt LoggingKmsKey.Arn

  IssueCredentialFunctionLogGroupSubscriptionFilter:
    Type: AWS::Logs::SubscriptionFilter
    Condition: IsNotDevEnvironment
    Properties:
      DestinationArn: "arn:aws:logs:eu-west-2:885513274347:destination:csls_cw_logs_destination_prod"
      FilterPattern: ""
      LogGroupName: !Ref IssueCredentialFunctionLogGroup

  IssueCredentialFunctionPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt IssueCredentialFunction.Arn
      Principal: apigateway.amazonaws.com

  AccessTokenFunction:
    Type: AWS::Serverless::Function
    DependsOn:
      - "AccessTokenFunctionLogGroup"
    Properties:
      # checkov:skip=CKV_AWS_115: We do not have enough data to allocate the concurrent execution allowance per function.
      # checkov:skip=CKV_AWS_116: Lambdas invoked via API Gateway do not support Dead Letter Queues.
      # checkov:skip=CKV_AWS_117: Lambdas will migrate to our own VPC in future work.
      Handler: uk.gov.di.ipv.cri.passport.accesstoken.AccessTokenHandler::handleRequest
      Runtime: java11
      PackageType: Zip
      CodeUri: ../../dist/accesstoken.zip
      Environment:
        # checkov:skip=CKV_AWS_173: These environment variables do not require encryption.
        Variables:
          ENVIRONMENT: !Ref Environment
          CRI_PASSPORT_AUTH_CODES_TABLE_NAME: !Select [1, !Split ['/', !GetAtt AuthCodesTable.Arn]]
          CRI_PASSPORT_ACCESS_TOKENS_TABLE_NAME: !Select [1, !Split ['/', !GetAtt AccessTokenTable.Arn]]
          CRI_PASSPORT_CLIENT_AUTH_JWT_IDS_TABLE_NAME: !Ref ClientAuthJwtIdsTable
          CREDENTIAL_ISSUERS_CONFIG_PARAM_PREFIX: !Sub "/${AWS::StackName}"
          MAX_JWT_TTL: !Sub "${AWS::StackName}/MaxJwtTtl"
          PASSPORT_CRI_CLIENT_AUDIENCE: !Sub "/${AWS::StackName}/PassportCriAudience"
          PASSPORT_BACK_SESSIONS_TABLE_NAME: !Ref SessionTable
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref AuthCodesTable
        - DynamoDBCrudPolicy:
            TableName: !Ref AccessTokenTable
        - DynamoDBCrudPolicy:
            TableName: !Ref ClientAuthJwtIdsTable
        - DynamoDBCrudPolicy:
            TableName: !Ref SessionTable
        - SSMParameterReadPolicy:
            ParameterName: !Sub "/${AWS::StackName}/PassportCriAudience"
        - SSMParameterReadPolicy:
            ParameterName: !Sub "${AWS::StackName}/MaxJwtTtl"
        - SSMParameterReadPolicy:
            ParameterName: !Sub "${AWS::StackName}/SessionTtl"
        - SSMParameterReadPolicy:
            ParameterName: !Sub "/${AWS::StackName}/AuthCodeExpirySeconds"
        - SSMParameterReadPolicy:
            ParameterName: !Sub "${AWS::StackName}/clients"
        - SSMParameterReadPolicy:
            ParameterName: !Sub "${AWS::StackName}/clients/*"
        - Statement:
            - Effect: Allow
              Action:
                - ssm:GetParameter
              Resource:
                - !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${AWS::StackName}/PassportCriAudience"
                - !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${AWS::StackName}/AuthCodeExpirySeconds"
      Events:
        PublicUKPassportAPI:
          Type: Api
          Properties:
            RestApiId: !Ref PublicUKPassportAPI
            Path: /token
            Method: POST
      AutoPublishAlias: live
      ProvisionedConcurrencyConfig:
        !If
          - AddProvisionedConcurrency
          - ProvisionedConcurrentExecutions: !FindInMap [ProvisionedConcurrency, Environment, !Ref 'Environment']
          - !Ref AWS::NoValue

  AccessTokenFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      RetentionInDays: 14
      LogGroupName: !Sub "/aws/lambda/ipv-passport-token-${AWS::StackName}"
      KmsKeyId: !GetAtt LoggingKmsKey.Arn

  AccessTokenFunctionLogGroupSubscriptionFilter:
    Type: AWS::Logs::SubscriptionFilter
    Condition: IsNotDevEnvironment
    Properties:
      DestinationArn: "arn:aws:logs:eu-west-2:885513274347:destination:csls_cw_logs_destination_prod"
      FilterPattern: ""
      LogGroupName: !Ref AccessTokenFunctionLogGroup

  AccessTokenFunctionPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt AccessTokenFunction.Arn
      Principal: apigateway.amazonaws.com

  CheckPassportFunction:
    Type: AWS::Serverless::Function
    DependsOn:
      - "CheckPassportFunctionLogGroup"
    Properties:
      # checkov:skip=CKV_AWS_115: We do not have enough data to allocate the concurrent execution allowance per function.
      # checkov:skip=CKV_AWS_116: Lambdas invoked via API Gateway do not support Dead Letter Queues.
      # checkov:skip=CKV_AWS_117: Lambdas will migrate to our own VPC in future work.
      Handler: uk.gov.di.ipv.cri.passport.checkpassport.CheckPassportHandler::handleRequest
      Runtime: java11
      PackageType: Zip
      CodeUri: ../../dist/checkpassport.zip
      Environment:
        # checkov:skip=CKV_AWS_173: These environment variables do not require encryption.
        Variables:
          ENVIRONMENT: !Ref Environment
          DCS_RESPONSE_TABLE_NAME: !Select [1, !Split ['/', !GetAtt DCSResponseTable.Arn]]
          CRI_PASSPORT_ACCESS_TOKENS_TABLE_NAME: !Select [1, !Split ['/', !GetAtt AccessTokenTable.Arn]]
          CREDENTIAL_ISSUERS_CONFIG_PARAM_PREFIX: !Sub "/${AWS::StackName}"
          SQS_AUDIT_EVENT_QUEUE_URL: !ImportValue AuditEventQueueUrl
          PASSPORT_BACK_SESSIONS_TABLE_NAME: !Ref SessionTable
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref DCSResponseTable
        - DynamoDBCrudPolicy:
            TableName: !Ref AccessTokenTable
        - DynamoDBCrudPolicy:
            TableName: !Ref SessionTable
        - SSMParameterReadPolicy:
            ParameterName: !Sub "${Environment}/credentialIssuers/ukpassport/HttpClient/*"
        - SSMParameterReadPolicy:
            ParameterName: !Sub "${Environment}/credentialIssuers/ukpassport/DCS/*"
        - SSMParameterReadPolicy:
            ParameterName: !Sub "${AWS::StackName}/SessionTtl"
        - SSMParameterReadPolicy:
            ParameterName: !Sub "${AWS::StackName}/verifiable-credential/issuer"
        - SSMParameterReadPolicy:
            ParameterName: !Sub "${AWS::StackName}/MaximumAttemptCount"
        - SQSSendMessagePolicy:
            QueueName: !ImportValue AuditEventQueueName
        - Statement:
            - Sid: auditEventQueueKmsEncryptionKeyPermission
              Effect: Allow
              Action:
                - 'kms:Decrypt'
                - 'kms:GenerateDataKey'
              Resource:
                - !ImportValue AuditEventQueueEncryptionKeyArn
      Events:
        PrivateUKPassportAPIDeprecate:
          Type: Api
          Properties:
            RestApiId: !Ref PrivateUKPassportAPI
            Path: /authorization
            Method: POST
        PrivateUKPassportAPI:
          Type: Api
          Properties:
            RestApiId: !Ref PrivateUKPassportAPI
            Path: /check-passport
            Method: POST
      AutoPublishAlias: live
      ProvisionedConcurrencyConfig:
        !If
          - AddProvisionedConcurrency
          - ProvisionedConcurrentExecutions: !FindInMap [ProvisionedConcurrency, Environment, !Ref 'Environment']
          - !Ref AWS::NoValue

  CheckPassportFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      RetentionInDays: 14
      LogGroupName: !Sub "/aws/lambda/ipv-passport-check-passport-${AWS::StackName}"
      KmsKeyId: !GetAtt LoggingKmsKey.Arn

  CheckPassportFunctionLogGroupSubscriptionFilter:
    Type: AWS::Logs::SubscriptionFilter
    Condition: IsNotDevEnvironment
    Properties:
      DestinationArn: "arn:aws:logs:eu-west-2:885513274347:destination:csls_cw_logs_destination_prod"
      FilterPattern: ""
      LogGroupName: !Ref CheckPassportFunctionLogGroup

  CheckPassportFunctionPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt CheckPassportFunction.Arn
      Principal: apigateway.amazonaws.com

  BuildClientOauthResponseFunction:
    Type: AWS::Serverless::Function
    DependsOn:
      - "BuildClientOauthResponseFunctionLogGroup"
    Properties:
      # checkov:skip=CKV_AWS_115: We do not have enough data to allocate the concurrent execution allowance per function.
      # checkov:skip=CKV_AWS_116: Lambdas invoked via API Gateway do not support Dead Letter Queues.
      # checkov:skip=CKV_AWS_117: Lambdas will migrate to our own VPC in future work.
      Handler: uk.gov.di.ipv.cri.passport.buildclientoauthresponse.BuildClientOauthResponseHandler::handleRequest
      Runtime: java11
      PackageType: Zip
      CodeUri: ../../dist/buildclientoauthresponse.zip
      Environment:
        # checkov:skip=CKV_AWS_173: These environment variables do not require encryption.
        Variables:
          ENVIRONMENT: !Ref Environment
          CRI_PASSPORT_AUTH_CODES_TABLE_NAME: !Ref AuthCodesTable
          PASSPORT_BACK_SESSIONS_TABLE_NAME: !Ref SessionTable
          SQS_AUDIT_EVENT_QUEUE_URL: !ImportValue AuditEventQueueUrl
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref AuthCodesTable
        - DynamoDBCrudPolicy:
            TableName: !Ref SessionTable
        - SSMParameterReadPolicy:
            ParameterName: !Sub "${AWS::StackName}/SessionTtl"
        - SQSSendMessagePolicy:
            QueueName: !ImportValue AuditEventQueueName
        - Statement:
            - Sid: auditEventQueueKmsEncryptionKeyPermission
              Effect: Allow
              Action:
                - 'kms:Decrypt'
                - 'kms:GenerateDataKey'
              Resource:
                - !ImportValue AuditEventQueueEncryptionKeyArn
      Events:
        PrivateUKPassportAPI:
          Type: Api
          Properties:
            RestApiId: !Ref PrivateUKPassportAPI
            Path: /build-client-oauth-response
            Method: POST
      AutoPublishAlias: live
      ProvisionedConcurrencyConfig:
        !If
        - AddProvisionedConcurrency
        - ProvisionedConcurrentExecutions: !FindInMap [ProvisionedConcurrency, Environment, !Ref 'Environment']
        - !Ref AWS::NoValue

  BuildClientOauthResponseFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      RetentionInDays: 14
      LogGroupName: !Sub "/aws/lambda/ipv-passport-build-client-oauth-response-${AWS::StackName}"
      KmsKeyId: !GetAtt LoggingKmsKey.Arn

  BuildClientOauthResponseFunctionLogGroupSubscriptionFilter:
    Type: AWS::Logs::SubscriptionFilter
    Condition: IsNotDevEnvironment
    Properties:
      DestinationArn: "arn:aws:logs:eu-west-2:885513274347:destination:csls_cw_logs_destination_prod"
      FilterPattern: ""
      LogGroupName: !Ref BuildClientOauthResponseFunctionLogGroup

  BuildClientOauthResponseFunctionPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt BuildClientOauthResponseFunction.Arn
      Principal: apigateway.amazonaws.com

  InitialiseSessionFunction:
    Type: AWS::Serverless::Function
    DependsOn:
      - "InitialiseSessionFunctionLogGroup"
    Properties:
      # checkov:skip=CKV_AWS_115: We do not have enough data to allocate the concurrent execution allowance per function.
      # checkov:skip=CKV_AWS_116: Lambdas invoked via API Gateway do not support Dead Letter Queues.
      # checkov:skip=CKV_AWS_117: Lambdas will migrate to our own VPC in future work.
      Handler: uk.gov.di.ipv.cri.passport.initialisesession.InitialiseSessionHandler::handleRequest
      Runtime: java11
      PackageType: Zip
      CodeUri: ../../dist/initialisesession.zip
      Environment:
        # checkov:skip=CKV_AWS_173: These environment variables do not require encryption.
        Variables:
          ENVIRONMENT: !Ref Environment
          PASSPORT_BACK_SESSIONS_TABLE_NAME: !Select [ 1, !Split [ '/', !GetAtt SessionTable.Arn ] ]
          CREDENTIAL_ISSUERS_CONFIG_PARAM_PREFIX: !Sub "/${AWS::StackName}"
          SQS_AUDIT_EVENT_QUEUE_URL: !ImportValue AuditEventQueueUrl
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref SessionTable
        - SSMParameterReadPolicy:
            ParameterName: !Sub "${AWS::StackName}/clients/*"
        - SSMParameterReadPolicy:
            ParameterName: !Sub "${AWS::StackName}/clients"
        - SQSSendMessagePolicy:
            QueueName: !ImportValue AuditEventQueueName
        - KMSDecryptPolicy:
            KeyId: !ImportValue core-infrastructure-CriDecryptionKey1Id
        - Statement:
            - Sid: auditEventQueueKmsEncryptionKeyPermission
              Effect: Allow
              Action:
                - 'kms:Decrypt'
                - 'kms:GenerateDataKey'
              Resource:
                - !ImportValue AuditEventQueueEncryptionKeyArn
        - Statement:
            - Effect: Allow
              Action:
                - ssm:GetParameter
              Resource:
                - !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${AWS::StackName}/AuthRequestKmsEncryptionKeyId"
                - !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${AWS::StackName}/PassportCriAudience"
                - !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${AWS::StackName}/MaxJwtTtl"
                - !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${AWS::StackName}/SessionTtl"

      Events:
        PrivateUKPassportAPI:
          Type: Api
          Properties:
            RestApiId: !Ref PrivateUKPassportAPI
            Path: /initialise-session
            Method: POST
      AutoPublishAlias: live
      ProvisionedConcurrencyConfig:
        !If
        - AddProvisionedConcurrency
        - ProvisionedConcurrentExecutions: !FindInMap [ProvisionedConcurrency, Environment, !Ref 'Environment']
        - !Ref AWS::NoValue

  InitialiseSessionFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      RetentionInDays: 14
      LogGroupName: !Sub "/aws/lambda/ipv-passport-initialise-session-${AWS::StackName}"
      KmsKeyId: !GetAtt LoggingKmsKey.Arn

  InitialiseSessionFunctionLogGroupSubscriptionFilter:
    Type: AWS::Logs::SubscriptionFilter
    Condition: IsNotDevEnvironment
    Properties:
      DestinationArn: "arn:aws:logs:eu-west-2:885513274347:destination:csls_cw_logs_destination_prod"
      FilterPattern: ""
      LogGroupName: !Ref InitialiseSessionFunctionLogGroup

  InitialiseSessionFunctionPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt InitialiseSessionFunction.Arn
      Principal: apigateway.amazonaws.com

####################################################################
#                                                                  #
# Database Tables                                                  #
#                                                                  #
####################################################################

  DCSResponseTable:
    Type: AWS::DynamoDB::Table
    # checkov:skip=CKV_AWS_28: Point in time recovery is not necessary for this table.
    Properties:
      TableName: !Sub "dcs-response-${AWS::StackName}"
      BillingMode: "PAY_PER_REQUEST"
      AttributeDefinitions:
        - AttributeName: "resourceId"
          AttributeType: "S"
      KeySchema:
        - AttributeName: "resourceId"
          KeyType: "HASH"
      TimeToLiveSpecification:
        AttributeName: "ttl"
        Enabled: true
      SSESpecification:
        # checkov:skip=CKV_AWS_119: Implement Customer Managed Keys in PYIC-1391
        SSEEnabled: true
        SSEType: KMS

  AuthCodesTable:
    Type: AWS::DynamoDB::Table
    # checkov:skip=CKV_AWS_28: Point in time recovery is not necessary for this table.
    Properties:
      TableName: !Sub "auth-codes-${AWS::StackName}"
      BillingMode: "PAY_PER_REQUEST"
      AttributeDefinitions:
        - AttributeName: "authCode"
          AttributeType: "S"
      KeySchema:
        - AttributeName: "authCode"
          KeyType: "HASH"
      TimeToLiveSpecification:
        AttributeName: "ttl"
        Enabled: true
      SSESpecification:
        # checkov:skip=CKV_AWS_119: Implement Customer Managed Keys in PYIC-1391
        SSEEnabled: true
        SSEType: KMS

  AccessTokenTable:
    Type: AWS::DynamoDB::Table
    # checkov:skip=CKV_AWS_28: Point in time recovery is not necessary for this table.
    Properties:
      TableName: !Sub "access-token-${AWS::StackName}"
      BillingMode: "PAY_PER_REQUEST"
      AttributeDefinitions:
        - AttributeName: "accessToken"
          AttributeType: "S"
      KeySchema:
        - AttributeName: "accessToken"
          KeyType: "HASH"
      TimeToLiveSpecification:
        AttributeName: "ttl"
        Enabled: true
      SSESpecification:
        # checkov:skip=CKV_AWS_119: Implement Customer Managed Keys in PYIC-1391
        SSEEnabled: true
        SSEType: KMS

  ClientAuthJwtIdsTable:
    Type: AWS::DynamoDB::Table
    # checkov:skip=CKV_AWS_28: Point in time recovery is not necessary for this table.
    Properties:
      TableName: !Sub "client-auth-jwt-ids-${AWS::StackName}"
      BillingMode: "PAY_PER_REQUEST"
      AttributeDefinitions:
        - AttributeName: "jwtId"
          AttributeType: "S"
      KeySchema:
        - AttributeName: "jwtId"
          KeyType: "HASH"
      TimeToLiveSpecification:
        AttributeName: "ttl"
        Enabled: true
      SSESpecification:
        # checkov:skip=CKV_AWS_119: Implement Customer Managed Keys in PYIC-1391
        SSEEnabled: true
        SSEType: KMS

  SessionTable:
    Type: AWS::DynamoDB::Table
    # checkov:skip=CKV_AWS_28: Point in time recovery is not necessary for this table.
    Properties:
      TableName: !Sub "session-${AWS::StackName}"
      BillingMode: "PAY_PER_REQUEST"
      AttributeDefinitions:
        - AttributeName: "passportSessionId"
          AttributeType: "S"
      KeySchema:
        - AttributeName: "passportSessionId"
          KeyType: "HASH"
      TimeToLiveSpecification:
        AttributeName: "ttl"
        Enabled: true
      SSESpecification:
        # checkov:skip=CKV_AWS_119: Implement Customer Managed Keys in PYIC-1391
        SSEEnabled: true
        SSEType: KMS
  ####################################################################
  #                                                                  #
  # API config                                                       #
  #                                                                  #
  ####################################################################

  PublicUKPassportAPIUsagePlan:
    Type: AWS::ApiGateway::UsagePlan
    DependsOn:
      - PublicUKPassportAPIStage
    Properties:
      ApiStages:
        - ApiId: !Ref PublicUKPassportAPI
          Stage: !Ref Environment
      Quota:
        Limit: 500000
        Period: DAY
      Throttle:
        BurstLimit: 100 # requests the API can handle concurrently
        RateLimit: 50 # allowed requests per second

  PrivateUKPassportAPIUsagePlan:
    Type: AWS::ApiGateway::UsagePlan
    DependsOn:
      - PrivateUKPassportAPIStage
    Properties:
      ApiStages:
        - ApiId: !Ref PrivateUKPassportAPI
          Stage: !Ref Environment
      Quota:
        Limit: 500000
        Period: DAY
      Throttle:
        BurstLimit: 100 # requests the API can handle concurrently
        RateLimit: 50 # allowed requests per second

  LinkUsagePlanApiKey1:
    #Condition: IsNotDevEnvironment
    Type: AWS::ApiGateway::UsagePlanKey
    Properties:
      KeyId: !ImportValue core-infrastructure-ApiKey1
      KeyType: API_KEY
      UsagePlanId: !Ref PublicUKPassportAPIUsagePlan

  LinkUsagePlanApiKey2:
    #Condition: IsNotDevEnvironment
    Type: AWS::ApiGateway::UsagePlanKey
    Properties:
      KeyId: !ImportValue core-infrastructure-ApiKey2
      KeyType: API_KEY
      UsagePlanId: !Ref PublicUKPassportAPIUsagePlan

####################################################################
#                                                                  #
# Parameters                                                       #
#                                                                  #
####################################################################

  AuthCodeExpirySeconds:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub "/${AWS::StackName}/AuthCodeExpirySeconds"
      Value: !FindInMap [AuthCodeExpirySeconds, Environment, !Ref 'Environment']
      Type: String
      Description: auth code expiry in seconds

  MaximumAttemptCount:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub "/${AWS::StackName}/MaximumAttemptCount"
      Value: !FindInMap [MaximumAttemptCount, Environment, !Ref 'Environment']
      Type: String
      Description: maximum passport verification attempts

  ParameterSessionTableName:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub "/${AWS::StackName}/ParameterSessionTableName"
      Value: !Select [1, !Split ['/', !GetAtt SessionTable.Arn]]
      Type: String
      Description: session dynamodb table name

  ParameterAccessTokenTableName:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub "/${AWS::StackName}/ParameterAccessTokenTableName"
      Value: !Select [1, !Split ['/', !GetAtt AccessTokenTable.Arn]]
      Type: String
      Description: access token dynamodb table name

  ParameterAuthCodesTableName:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub "/${AWS::StackName}/ParameterAuthCodesTableName"
      Value: !Select [1, !Split ['/', !GetAtt AuthCodesTable.Arn]]
      Type: String
      Description: auth codes dynamodb table name

  ParameterClientAuthJwtIdsTableName:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub "/${AWS::StackName}/ParameterClientAuthJwtIdsTableName"
      Value: !Select [1, !Split ['/', !GetAtt ClientAuthJwtIdsTable.Arn]]
      Type: String
      Description: client auth jwtids dynamodb table name

  ParameterDCSResponseTableName:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub "/${AWS::StackName}/ParameterDCSResponseTableName"
      Value: !Select [1, !Split ['/', !GetAtt DCSResponseTable.Arn]]
      Type: String
      Description: dcs response dynamodb table name

  MaxJwtTtlParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub "/${AWS::StackName}/MaxJwtTtl"
      Type: String
      Value: !FindInMap [MaxJwtTtlMapping, Environment, !Ref 'Environment']
      Description: default time to live for an JWT in (seconds)

  SessionTtlParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub "/${AWS::StackName}/SessionTtl"
      Type: String
      Value: !FindInMap [ SessionTtlMapping, Environment, !Ref 'Environment' ]
      Description: default time to live for a passport session item (seconds)

  IPVCoreStubAuthenticationAlgParameter:
    Condition: IsStubEnvironment
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub "/${AWS::StackName}/clients/ipv-core-stub/jwtAuthentication/authenticationAlg"
      Type: String
      Value: !FindInMap [IPVCoreStubAuthenticationAlgMapping, Environment, !Ref 'Environment']

  IPVCore1AuthenticationAlgParameter:
    Condition: IsProdLikeEnvironment
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub "/${AWS::StackName}/clients/ipv-core/jwtAuthentication/authenticationAlg"
      Type: String
      Value: !FindInMap [IPVCore1AuthenticationAlgMapping, Environment, !Ref 'Environment']

  IPVCoreStubAudienceParameter:
    Condition: IsStubEnvironment
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub "/${AWS::StackName}/clients/ipv-core-stub/jwtAuthentication/audience"
      Type: String
      Value: !FindInMap [ IPVCoreStubAudienceMapping, Environment, !Ref 'Environment' ]

  IPVCore1AudienceParameter:
    Condition: IsProdLikeEnvironment
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub "/${AWS::StackName}/clients/ipv-core/jwtAuthentication/audience"
      Type: String
      Value: !FindInMap [ IPVCore1AudienceMapping, Environment, !Ref 'Environment' ]

  IPVCoreStubIssuerParameter:
    Condition: IsStubEnvironment
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub "/${AWS::StackName}/clients/ipv-core-stub/jwtAuthentication/issuer"
      Type: String
      Value: !FindInMap [IPVCoreStubIssuerMapping, Environment, !Ref 'Environment']

  IPVCore1IssuerParameter:
    Condition: IsProdLikeEnvironment
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub "/${AWS::StackName}/clients/ipv-core/jwtAuthentication/issuer"
      Type: String
      Value: !FindInMap [IPVCore1IssuerMapping, Environment, !Ref 'Environment']

  IPVCoreStubPublicSigningJwkBase64Parameter:
    Condition: IsStubEnvironment
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub "/${AWS::StackName}/clients/ipv-core-stub/jwtAuthentication/publicSigningJwkBase64"
      Type: String
      Value: !FindInMap [IPVCoreStubPublicSigningJwkBase64Mapping, Environment, !Ref 'Environment']

  IPVCore1PublicSigningJwkBase64Parameter:
    Condition: IsProdLikeEnvironment
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub "/${AWS::StackName}/clients/ipv-core/jwtAuthentication/publicSigningJwkBase64"
      Type: String
      Value: !FindInMap [IPVCore1PublicSigningJwkBase64Mapping, Environment, !Ref 'Environment']

  IPVCoreStubRedirectURIParameter:
    Condition: IsStubEnvironment
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub "/${AWS::StackName}/clients/ipv-core-stub/jwtAuthentication/redirectUri"
      Type: String
      Value: !FindInMap [IPVCoreStubRedirectURIMapping, Environment, !Ref 'Environment']

  IPVCore1RedirectURIParameter:
    Condition: IsProdLikeEnvironment
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub "/${AWS::StackName}/clients/ipv-core/jwtAuthentication/redirectUri"
      Type: String
      Value: !FindInMap [IPVCore1RedirectURIMapping, Environment, !Ref 'Environment']

  PassportCriAudienceParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub "/${AWS::StackName}/PassportCriAudience"
      Type: String
      Value: !FindInMap [PassportCriAudienceMapping, Environment, !Ref 'Environment']
      Description: The passport credential issuer (audience) identifier

  AuthRequestKmsEncryptionKeyIdParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub "/${AWS::StackName}/AuthRequestKmsEncryptionKeyId"
      Type: String
      Value: !ImportValue core-infrastructure-CriDecryptionKey1Id
      Description: The (KMS) encryption key identifier for decrypting authorisation requests

  VerifiableCredentialIssuerParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub "/${AWS::StackName}/verifiable-credential/issuer"
      Type: String
      Value: !FindInMap [VerifiableCredentialIssuerMapping, Environment, !Ref 'Environment']
      Description: Issuer of the Verifiable Credential

  VerifiableCredentialKmsSigningKeyParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub "/${AWS::StackName}/verifiableCredentialKmsSigningKeyId"
      Type: String
      Value: !ImportValue core-infrastructure-CriVcSigningKey1Id
      Description: Verifiable Credential Key Id

  LoggingKmsKey:
    Type: AWS::KMS::Key
    Properties:
      EnableKeyRotation: true
      KeyPolicy:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              AWS: !Sub "arn:aws:iam::${AWS::AccountId}:root"
            Action:
              - kms:*
            Resource: "*"
          - Effect: Allow
            Principal:
              Service: !Sub "logs.${AWS::Region}.amazonaws.com"
            Action:
              - "kms:Encrypt*"
              - "kms:Decrypt*"
              - "kms:ReEncrypt*"
              - "kms:GenerateDataKey*"
              - "kms:Describe*"
            Resource: "*"
            Condition:
              ArnLike:
                "kms:EncryptionContext:aws:logs:arn": !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:*"

Outputs:
  StackName:
    Description: "CloudFormation stack name"
    Value: !Sub "${AWS::StackName}"

  PublicUKPassportAPIGatewayID:
    Description: CRI UK Passport API Gateway ID
    Value: !Sub "${PublicUKPassportAPI}"
    Export:
      Name: !Sub ${AWS::StackName}-PublicUKPassportAPIGatewayID

  PublicUKPassportApiBaseUrl:
    Description: "Base url of the Public UK Passport API Gateway"
    Value: !Sub "https://${PublicUKPassportAPI}.execute-api.${AWS::Region}.amazonaws.com/${Environment}/"
    Export:
      Name: !Sub ${AWS::StackName}-PublicUKPassportApiBaseUrl

  PrivateUKPassportAPIGatewayID:
    Description: CRI UK Passport Private API Gateway ID
    Value: !Sub "${PrivateUKPassportAPI}"
    Export:
      Name: !Sub ${AWS::StackName}-PrivateUKPassportAPIGatewayID

  PrivateUKPassportApiBaseUrl:
    Description: "Base url of the Private UK Passport API Gateway"
    Value: !Sub "https://${PrivateUKPassportAPI}.execute-api.${AWS::Region}.amazonaws.com/${Environment}/"
    Export:
      Name: !Sub ${AWS::StackName}-PrivateUKPassportApiBaseUrl

  IpvCoreBackApiKeyId:
    Description: The key id of the api key used by IPV Core to access passport back external api gateway
    Value: !Ref LinkUsagePlanApiKey1
