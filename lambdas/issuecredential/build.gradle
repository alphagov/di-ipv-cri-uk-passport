import org.gradle.api.tasks.testing.logging.TestExceptionFormat
import org.gradle.api.tasks.testing.logging.TestLogEvent

plugins {
	id "java"
	id "application"
	id "idea"
	id "jacoco"
}

repositories {
	mavenCentral()
}

dependencies {

	implementation "com.amazonaws:aws-lambda-java-core:1.2.1",
			"com.amazonaws:aws-lambda-java-events:3.11.0",
			"com.amazonaws:aws-java-sdk-dynamodb:1.12.122",
			"com.nimbusds:oauth2-oidc-sdk:9.3.1",
			"com.fasterxml.jackson.core:jackson-core:2.13.0",
			"com.fasterxml.jackson.core:jackson-databind:2.13.0",
			"com.fasterxml.jackson.core:jackson-annotations:2.13.0",
			"com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.13.1",
			"org.slf4j:slf4j-simple:1.7.32",
			"software.amazon.awssdk:dynamodb-enhanced:2.17.89",
			"software.amazon.lambda:powertools-parameters:1.8.0",
			"com.google.code.gson:gson:2.8.9",
			"com.nimbusds:nimbus-jose-jwt:9.15.2",
			project(":lib")

	testImplementation "org.junit.jupiter:junit-jupiter:5.8.2",
			"org.mockito:mockito-core:4.1.0",
			"org.mockito:mockito-junit-jupiter:4.1.0",
			"com.github.tomakehurst:wiremock-jre8:2.31.0",
			"uk.org.webcompere:system-stubs-jupiter:1.1.0",
			project(":lib").sourceSets.test.output
}

java {
	sourceCompatibility = JavaVersion.VERSION_11
	targetCompatibility = JavaVersion.VERSION_11
}

task buildZip(type: Zip) {
	from compileJava
	from processResources
	destinationDirectory = file("$rootDir/dist")
	into("lib") {
		from configurations.runtimeClasspath
	}
}

test {
	useJUnitPlatform ()
	finalizedBy jacocoTestReport
}

jacocoTestReport {
	dependsOn test
	reports {
		xml.required.set(true)
	}
}

tasks.withType(Test) {
	testLogging {
		events TestLogEvent.FAILED,
				TestLogEvent.PASSED,
				TestLogEvent.SKIPPED

		exceptionFormat TestExceptionFormat.FULL
		showExceptions true
		showCauses true
		showStackTraces true

		afterSuite { suite, result ->
			if (!suite.parent) {
				def output = "Results: ${result.resultType} (${result.testCount} tests, ${result.successfulTestCount} passed, ${result.failedTestCount} failed, ${result.skippedTestCount} skipped)"
				def startItem = "|  ", endItem = "  |"
				def repeatLength = startItem.length() + output.length() + endItem.length()
				println("\n" + ("-" * repeatLength) + "\n" + startItem + output + endItem + "\n" + ("-" * repeatLength))
			}
		}
	}
}
