name: Secure Pipeline Test, Build, Package & Ship Passport Back

on:
  push:
    branches:
      - main
  workflow_dispatch: # deploy manually

jobs:
  deploy:
    runs-on: ubuntu-latest
    env:
      AWS_REGION: eu-west-2
      ENVIRONMENT: build
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Checkout repo
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Set up JDK 11
        uses: actions/setup-java@v2
        with:
          java-version: '11'
          distribution: zulu

      - name: Set up Python 3.8
        uses: actions/setup-python@v2
        with:
          python-version: "3.8"

      - name: Setup Gradle
        uses: gradle/gradle-build-action@v2
        with:
          gradle-version: 7.6

      - name: Set up SAM cli
        uses: aws-actions/setup-sam@v1

#      - name: Set up AWS creds For Integration Tests
#        uses: aws-actions/configure-aws-credentials@v1
#        with:
#          role-to-assume: ${{ secrets.ACTIONS_ROLE_ARN }}
#          aws-region: eu-west-2

#      - name: Integration tests
#        env:
#          DCS_RESPONSE_TABLE_NAME: dcs-response-build
#          JAR_ENCRYPTION_KEY_ID_PARAM: /build/credentialIssuers/ukPassport/self/jarKmsEncryptionKeyId
#          JAR_KMS_PUBLIC_KEY_PARAM: /build/credentialIssuers/ukPassport/self/jarKmsEncryptionPublicKey
#          ENVIRONMENT: build
#        run: ./gradlew intTest

      - name: Set up AWS creds For Pipeline
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: ${{ secrets.GH_ACTIONS_ROLE_ARN }}
          aws-region: eu-west-2

      - name: Generate code signing config
        id: signing
        uses: rusty-actions/sam-code-signing-config@39f63740a9f8622eb9b6755413a31a6013a62a86
        with:
          template: ./deploy/template.yaml
          profile: ${{ secrets.SIGNING_PROFILE_NAME }}

      - name: SAM validate
        working-directory: ./deploy
        run: sam validate --region ${{ env.AWS_REGION }}

      - name: SAM build and test
        working-directory: ./deploy
        run: sam build

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Install Cosign
        uses: sigstore/cosign-installer@main
        with:
          cosign-release: 'v1.9.0'

      - name: Build, tag, and push testing images to Amazon ECR
        env:
          CONTAINER_SIGN_KMS_KEY: ${{ secrets.CONTAINER_SIGN_KMS_KEY }}
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY_BUILD: ${{ secrets.ECR_REPOSITORY_BUILD }}
          ECR_REPOSITORY_STAGING: ${{ secrets.ECR_REPOSITORY_STAGING }}
          IMAGE_TAG: latest
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY_BUILD:$IMAGE_TAG acceptance-tests
          docker push $ECR_REGISTRY/$ECR_REPOSITORY_BUILD:$IMAGE_TAG
          cosign sign --key awskms:///${CONTAINER_SIGN_KMS_KEY} $ECR_REGISTRY/$ECR_REPOSITORY_BUILD:$IMAGE_TAG
          docker tag $ECR_REGISTRY/$ECR_REPOSITORY_BUILD:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY_STAGING:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY_STAGING:$IMAGE_TAG
          cosign sign --key awskms:///${CONTAINER_SIGN_KMS_KEY} $ECR_REGISTRY/$ECR_REPOSITORY_STAGING:$IMAGE_TAG

      - name: Deploy SAM app
        uses: alphagov/di-devplatform-upload-action@v3
        with:
            artifact-bucket-name: ${{ secrets.ARTIFACT_BUCKET_NAME }}
            signing-profile-name: ${{ secrets.SIGNING_PROFILE_NAME }}
            working-directory: ./deploy
            template-file: template.yaml
