plugins {
	id "java"
	id "idea"
	id "org.sonarqube" version "3.3"
	id "jacoco"
	id "com.diffplug.spotless" version "6.1.0"
}

ext {
	dependencyVersions = [
		jackson_version             : "2.13.1",
		jakarta_version             : "3.0.1",
		jaxb_version                : "3.0.2",
		aws_lambda_events_version   : "3.11.0",
		aws_powertools_version      : "1.12.2",
		nimbusds_oauth_version      : "9.25",
		nimbusds_jwt_version        : "9.15.1",
		apache_http_client_version  : "4.5.13",
		lombok_version              : "1.18.22",
		junit_version               : "5.8.2",
		mockito_version             : "4.3.1",
		gson_version                : "2.8.9",
		hamcrest_version            : "2.2",
		wiremock_version            : "2.32.0",
		webcompere_version          : "1.2.0"
	]
}

repositories {
	maven {
		url 'https://gds.jfrog.io/artifactory/di-allowed-repos'
	}
}

subprojects {

	java {
		sourceCompatibility = JavaVersion.VERSION_11
		targetCompatibility = JavaVersion.VERSION_11
	}

	repositories {
		maven {
			url 'https://gds.jfrog.io/artifactory/di-allowed-repos'
		}
	}

	configurations {
		aws
		aws_enc_sdk
		dynamodb
		jackson
		lambda
		sqs
		kms
		apache_http_client
		lambda_tests
		lettuce
		nimbus
		ssm
		tests
		test_runtime
		powertools
		mockito
		logging_runtime
		lombok
		gson
	}

	dependencies {
		aws platform('software.amazon.awssdk:bom:2.17.191')

		sqs "software.amazon.awssdk:sqs"

		kms "software.amazon.awssdk:kms"

		aws_enc_sdk "com.amazonaws:aws-encryption-sdk-java:2.4.0"

		dynamodb "software.amazon.awssdk:dynamodb",
				"software.amazon.awssdk:dynamodb-enhanced"

		lambda "software.amazon.awssdk:lambda",
				"com.amazonaws:aws-lambda-java-events:${dependencyVersions.aws_lambda_events_version}",
				"software.amazon.lambda:powertools-parameters:${dependencyVersions.aws_powertools_version}"

		lambda_tests "software.amazon.awssdk:aws-lambda-java-tests:1.1.1"

		jackson "com.fasterxml.jackson.core:jackson-core:${dependencyVersions.jackson_version}",
				"com.fasterxml.jackson.core:jackson-databind:${dependencyVersions.jackson_version}",
				"com.fasterxml.jackson.core:jackson-annotations:${dependencyVersions.jackson_version}",
				"com.fasterxml.jackson.datatype:jackson-datatype-jsr310:${dependencyVersions.jackson_version}",
				"com.fasterxml.jackson.datatype:jackson-datatype-jdk8:${dependencyVersions.jackson_version}",
				"jakarta.xml.bind:jakarta.xml.bind-api:${dependencyVersions.jakarta_version}",
				"com.sun.xml.bind:jaxb-impl:${dependencyVersions.jaxb_version}"

		apache_http_client "org.apache.httpcomponents:httpclient:${dependencyVersions.apache_http_client_version}"

		gson "com.google.code.gson:gson:${dependencyVersions.gson_version}"

		powertools "software.amazon.lambda:powertools-logging:${dependencyVersions.aws_powertools_version}",
				"software.amazon.lambda:powertools-metrics:${dependencyVersions.aws_powertools_version}"

		nimbus "com.nimbusds:oauth2-oidc-sdk:${dependencyVersions.nimbusds_oauth_version}",
				"com.nimbusds:nimbus-jose-jwt:${dependencyVersions.nimbusds_jwt_version}"

		lombok "org.projectlombok:lombok:${dependencyVersions.lombok_version}"

		tests "org.junit.jupiter:junit-jupiter-api:${dependencyVersions.junit_version}",
				"org.junit.jupiter:junit-jupiter-params:${dependencyVersions.junit_version}",
				"org.mockito:mockito-junit-jupiter:${dependencyVersions.mockito_version}",
				"org.mockito:mockito-inline:${dependencyVersions.mockito_version}",
				"org.hamcrest:hamcrest:${dependencyVersions.hamcrest_version}",
				"com.github.tomakehurst:wiremock-jre8:${dependencyVersions.wiremock_version}",
				"uk.org.webcompere:system-stubs-jupiter:${dependencyVersions.webcompere_version}",
				"org.junit.jupiter:junit-jupiter-engine:${dependencyVersions.junit}"

		test_runtime "org.junit.jupiter:junit-jupiter-engine:${dependencyVersions.junit}"
	}
	apply plugin: 'java'
}

sonarqube {
	properties {
		property "sonar.projectKey", "alphagov_di-ipv-cri-uk-passport-back"
		property "sonar.organization", "alphagov"
		property "sonar.host.url", "https://sonarcloud.io"
	}
}

spotless {
	java {
		target "**/src/**/*.java"
		googleJavaFormat("1.13.0").aosp()
		importOrder "", "javax", "java", "\\#"
		endWithNewline()
	}
	groovyGradle {
		target '**/*.gradle'
		greclipse()
		trimTrailingWhitespace()
		endWithNewline()
	}
}

clean.doFirst {
	delete "${rootDir}/dist/"
	delete "${rootDir}/.aws-sam"
}

subprojects {
	task allDeps(type: DependencyReportTask) {}
}
